@inject IJSRuntime JS

<div id="carouselWithCaptions" class="carousel slide" data-bs-interval="3000">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#carouselWithCaptions" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#carouselWithCaptions" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#carouselWithCaptions" data-bs-slide-to="2" aria-label="Slide 3"></button>
        <button type="button" data-bs-target="#carouselWithCaptions" data-bs-slide-to="3" aria-label="Slide 4"></button>
        <button type="button" data-bs-target="#carouselWithCaptions" data-bs-slide-to="4" aria-label="Slide 5"></button>
    </div>
    <div class="carousel-inner">
        @foreach(Product p in FreshProducts)
        {
            if(p == FreshProducts.First())
            {
                <div class="carousel-item active">    
                    <img src=@p.Imgurl class="d-block w-100" style="filter:brightness(30%);height:20rem;">
                    <div class="carousel-caption d-md-block">
                        <h5>@p.Name</h5>
                        <p>@p.Description</p>
                    </div>
                </div>
            }
            else
            {
                <div class="carousel-item">    
                    <img src=@p.Imgurl class="d-block w-100" style="filter:brightness(30%);height:20rem;">
                    <div class="carousel-caption d-md-block">
                        <h5>@p.Name</h5>
                        <p>@p.Description</p>
                    </div>
                </div>
            }

        }
    </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselWithCaptions" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselWithCaptions" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>

@code {
    /*[Parameter]
    public int ActiveID { get; set; }

    [Parameter]
    public EventCallback<int> ActiveIDChanged { get; set; }*/


    [Parameter]
    public List<Product> FreshProducts{ get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            //var dotNetReference = DotNetObjectReference.Create(this);
            //await JS.InvokeVoidAsync("ITProjectCsharp.GetActivePicture", dotNetReference);
            await JS.InvokeVoidAsync("CarouselStart");
        }

    }
    /*[JSInvokable]
    public async void ChangeActiveId(string id)
    {
        ActiveID = int.Parse(id);
        await ActiveIDChanged.InvokeAsync(ActiveID);
        StateHasChanged();
    }*/
}
