@page "/Cart/Checkout"
@inject ProfileVM _profileVM
@inject NavigationManager _navigationManager
@inject ILocalStorageService localStorage
@inject HttpClientWrapper _http;

<div class="container">
    @if(_profileVM.User.City == "" || _profileVM.User.Address == "" || _profileVM.User.Phone == "")
    {
        <div class="alert alert-danger">
            <h1>Profile is incomplete, please fill out your missing data.</h1>
            @if(_profileVM.User.City == "")
            {
                <div>
                    <h4>City</h4>
                    <input type="text" placeholder="city" @bind=@City class="form-control"/>
                </div>
            }
            @if(_profileVM.User.Address == "")
            {
                <div>
                    <h4>Address</h4>
                    <input type="text" placeholder="address" @bind=@Address class="form-control"/>
                </div>
            }
            @if(_profileVM.User.Phone == "")
            {
                <div>
                    <h4>Phone</h4>
                    <input type="number" placeholder="phone" @bind=@Phone class="form-control"/>
                </div>
            }
        </div>
        <button @onclick="@UpdateProfile" class="btn btn-danger">Update profile</button>
    }
    else
    {
        
        <div class="alert alert-info">
            <h4 class="display-6">City: @_profileVM.User.City</h4>
            <h4 class="display-6">Address: @_profileVM.User.Address</h4>
            <h4 class="display-6">Phone: @_profileVM.User.Phone</h4>
            <p class="alert alert-danger">You can change your shipping data on your profile.</p>
        </div>
        <div class="container">
            <NewsComponent Classes="justify-content-center">
                <EditForm Model=this OnValidSubmit=@PlaceOrder style="text-align:center">
                    <InputRadioGroup @bind-Value=@SelectedPayment>
                        <PaymentMethodComponent Value="Credit Card" Imgurl="https://media.istockphoto.com/photos/stacked-credit-cards-picture-id1203763961?k=20&m=1203763961&s=612x612&w=0&h=mrFgkoWWVdp0mtt_vw6OTEZCSjw3bUYhuJt5QWVdkXo="></PaymentMethodComponent>
                        <PaymentMethodComponent Value="Cash" Imgurl="https://static3.depositphotos.com/1007115/233/i/950/depositphotos_2332507-stock-photo-cash.jpg"></PaymentMethodComponent>
                        <PaymentMethodComponent Value="Paypal" Imgurl="https://logowik.com/content/uploads/images/897_paypal.jpg"></PaymentMethodComponent>
                        <PaymentMethodComponent Value="Prepaid" Imgurl="https://media.istockphoto.com/photos/businesspeople-exchanging-visiting-card-picture-id842324660?k=20&m=842324660&s=612x612&w=0&h=xa-A0VdXN8Ly9zQTi1BnLK1hx1_itJEvyFxjLkZPZ6o="></PaymentMethodComponent>
                    </InputRadioGroup>
                    <h1 style="text-align:center;color:white;">Selected payment method: @SelectedPayment</h1>
                    <button class="btn btn-primary" type="submit">Place Order</button>
                </EditForm>
            </NewsComponent>
        </div>
    }

</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string Phone { get; set; }
    private string Address { get; set; }
    private string City { get; set; }
    private record PaymentOption{}
    private string SelectedPayment { get; set; } = "Credit Card";
    private List<string> values = new() { "Credit Card", "Cash", "Paypal", "Prepaid" };

    protected override async Task OnInitializedAsync()
    {
        var userID = await GetUserFromAuthState.GetIdFromAuthUser(authenticationState);

        if(userID is not -1)
        {
            _profileVM.User.Id = userID;
            await _profileVM.GetProfile();
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }


    public async Task UpdateProfile()
    {
        if(_profileVM.User.Phone is "" or null)
        {
            _profileVM.User.Phone = Phone;
        }
        if(_profileVM.User.Address is "" or null)
        {
            _profileVM.User.Address = Address;
        }
        if(_profileVM.User.City is "" or null)
        {
            _profileVM.User.City = City;
        }
        var result = await _profileVM.UpdateProfile();
    }

    public async Task PlaceOrder()
    {
        Order o = new()
            {
                Userid = _profileVM.User.Id,
                Date = DateTime.Now,
                Paymentmethod = SelectedPayment
            };

        if(await localStorage.ContainKeyAsync(_profileVM.User.Email))
        {
            List<Item> items = new();
            var cart = await localStorage.GetItemAsync<List<string>>(_profileVM.User.Email);
            var groupedCart = cart.GroupBy(x => x);
            foreach(var item in groupedCart)
            {
                Item i = new()
                {
                    Productid = int.Parse(item.Key),
                    Productcount = item.Count(),
                };
                items.Add(i);
            }
            o.Items = items;
            var result = await _http.SendWithContent(HttpMethod.Post, "api/Orders", o);
            if(result.IsSuccessStatusCode)
            {
                await localStorage.SetItemAsync(_profileVM.User.Email,new List<string>());
                _navigationManager.NavigateTo("/true");
            }
        }

    }
}
